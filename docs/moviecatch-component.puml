@startuml Basic Sample
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include FONTAWESOME/users.puml
!include DEVICONS/react_original.puml
!include DEVICONS/spring.puml
!include DEVICONS/postgresql.puml

System_Ext(email, "E-mail System", "External Email System Service")
System_Ext(movie_api_external, "Movie API", "External Movie API Service")

Container(web_app, "Single Page Application", "React", "Web interface that provides information to the user", $sprite="react_original")
Container(api, "Api Application", "Spring", "Manage user data and movies", $sprite="spring")
ContainerDb(db, "Database", "Postgres", "It has the user data and movie list", $sprite="postgresql")

Container_Boundary(api, "API Application") {
    Component(authentication_usecase, "Authentication Use Case", "", "Authentic user through email and password registered in the database")
    Component(register_user_usecase, "Register User Use Case", "", "Register a new system user")
    Component(email_service, "Email Service", "", "Sends e-mails to users")
    Component(list_movies, "List Movies Use Case", "", "View all registered movies")
    Component(list_movies_service, "Movie Service", "", "Get movie information")
    Component(movie_list_create, "Create Movie Favorite List Use Case", "", "Creates a new user favorite movie list")
    Component(movie_list_update, "Update Movie Favorite List Use Case", "", "Update a user favorite movie list")
    Component(movie_list_delete, "Delete Movie Favorite List Use Case", "", "Delete a user favorite movie list")
    Component(movie_wantwatch, "Management of movies want to watch Use Case", "", "User defines which movies he wants to watch")
    Component(movie_rating, "Movie Rating Use Case", "", "User classifies watched movies by rating")
    Component(user_management, "Management user info Use Case", "", "User will be able to edit their basic information")
    Component(movie_list_get, "List User movie list Use Case", "", "User will be able to view lists of other users")
}

Rel(email_service, email, "Sends-email using", "SMTP")
Rel(register_user_usecase, email_service, "Uses")
Rel(list_movies, list_movies_service, "Uses")
Rel(list_movies_service, movie_api_external, "Gets movie data and information", "JSON")

Rel(web_app, authentication_usecase, "Makes API calls to", "JSON")
Rel(web_app, register_user_usecase, "Makes API calls to", "JSON")
Rel(web_app, list_movies, "Makes API calls to", "JSON")
Rel(web_app, movie_list_create, "Makes API calls to", "JSON")
Rel(web_app, movie_list_update, "Makes API calls to", "JSON")
Rel(web_app, movie_list_delete, "Makes API calls to", "JSON")
Rel(web_app, movie_wantwatch, "Makes API calls to", "JSON")
Rel(web_app, movie_rating, "Makes API calls to", "JSON")
Rel(web_app, user_management, "Makes API calls to", "JSON")
Rel(web_app, movie_list_get, "Makes API calls to", "JSON")


Rel(authentication_usecase, db, "Recover user data", "Spring Data / JPA")
Rel(register_user_usecase, db, "Register a new user", "Spring Data / JPA")
Rel(movie_list_create, db, "Register a new favorite movie list", "Spring Data / JPA")
Rel(movie_list_update, db, "Update a favorite movie list", "Spring Data / JPA")
Rel(movie_list_delete, db, "Delete a favorite movie list", "Spring Data / JPA")
Rel(movie_wantwatch, db, "Management of movies want to watch", "Spring Data / JPA")
Rel(movie_rating, db, "Movie rating", "Spring Data / JPA")
Rel(user_management, db, "Movie rating", "Spring Data / JPA")
Rel(movie_list_get, db, "Movie rating", "Spring Data / JPA")


LAYOUT_LEFT_RIGHT()
@enduml